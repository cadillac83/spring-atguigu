package com.hevispring.aop;

import java.util.Arrays;
import java.util.List;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class LoggingAspect {
	
	//可参照LoggingProxy了解出发时机
	//前置通知
	@Before("execution(* com.hevispring.aop.Calculate.*(..))")
	public void before(JoinPoint joinPoint) {
		String methodName = joinPoint.getSignature().getName();
		List<Object> args = Arrays.asList(joinPoint.getArgs());
		System.out.println(methodName+" ("+args+")-beginning");
	}
	//后置通知
	@After("execution(* com.hevispring.aop.Calculate.*(..))")
	public void after(JoinPoint joinPoint) {
		String methodName = joinPoint.getSignature().getName();
		List<Object> args = Arrays.asList(joinPoint.getArgs());
		System.out.println(methodName+" ("+args+")-ending");
	}
	//返回通知
	@AfterReturning(value="execution(* com.hevispring.aop.Calculate.*(..))",returning="result")
	public void afterReturning(JoinPoint joinPoint, Object result) {
		String methodName = joinPoint.getSignature().getName();
		List<Object> args = Arrays.asList(joinPoint.getArgs());
		System.out.println(methodName+" ("+args+")-return:"+result);
	}
	//异常通知
	@AfterThrowing(value="execution(* com.hevispring.aop.Calculate.*(..))",throwing="err")
	public void afterThrowing(JoinPoint joinPoint, Exception err) {
		String methodName = joinPoint.getSignature().getName();
		List<Object> args = Arrays.asList(joinPoint.getArgs());
		System.out.println(methodName+" ("+args+")-throw error:"+err);
	}
	//环绕通知
	@Around(value="execution(* com.hevispring.aop.Calculate.*(..))")
	public Object around(ProceedingJoinPoint proceedingJoinPoint) {
		Object proceed = null;
		try {
			proceed = proceedingJoinPoint.proceed();
		} catch (Throwable e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		System.out.println(proceed);
		return proceed;
	}
	
}
